/*global
valence_req, valence_auth, pubsubz, tileInit, modcallsdone, completionCalculated, topicCompletionCalculated
*/
/**
 * Creative Services Valence Library (CSVal) - Extended Functionality
 * ------------------------------------------------------------------------------------------------
 *	A library of routines to ease the use of Brightspace Valence APIs for client-side projects. This
 * library will only function within content stored inside the Brightspace Learning Environment,
 * and cannot be served from an external web server or CDN.
 *
 *	More information regarding this library and its use can be found at:
 *		http://xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
 *
 *	Requirements:
 *		- Brightspace LE 10.3.SP16 or greater, unless otherwise indicated in the documentation.
 *		- Brightspace Superagent Session Authentication Library (bundled)
 *
 *	Version: 1.0.alpha (Aquamarine)
 *
 * @namespace
 * @this {CSVal}
 */

// ---------- Valence Routes ----------

CSVal.routes.get_module = '/d2l/api/le/1.10/ORGID/content/modules/MODID';
CSVal.routes.get_completion = '/d2l/api/le/1.19/ORGID/content/completions/mycount/';

CSVal.tocCompletion = CSVal.tocCompletion || {};

// ---------- Valence Functions ----------
/*
	CSVal.toc_nextUnread
	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	- Return the topic details of the next unread item in the ToC, or false if all are read
*/
CSVal.toc_firstTopic = function (Module, startModule) {
   var topicID;

	if (Module === undefined) Module = CSVal.toc;

	if (startModule !== undefined) {
		if (typeof startModule !== 'number') {
			return false;
		}
	} else {
		startModule = 0;
	}

	// Check topics within this module level
	if (Module.Topics !== undefined) {
		if (Module.Topics.length>0) {
                  Module.Topics[0].ParentModuleId = Module.ModuleId;
			return Module.Topics[0];
		}
	}

	// Recursively check sub-modules
	// Note: At this time we must assume that sub-modules are ordered before topics within the current
	// level as Valence is not able to provide us with ordering details.
	if (Module.Modules !== undefined) {
		for (var i = startModule; i < Module.Modules.length; i++) {
			topicID = CSVal.toc_firstTopic(Module.Modules[i]);
			if (topicID !== false) {
				return topicID;
			}
		}
	}



	// If no unread results can be found return false
	return false;
}
/*
	CSVal.toc_nextUnread
	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	- Return the topic details of the next incomplete item in the ToC, or false if all are complete
*/
CSVal.toc_firstTopic = function (Module, startModule) {
   var topicID;

	if (Module === undefined) Module = CSVal.toc;

	if (startModule !== undefined) {
		if (typeof startModule !== 'number') {
			return false;
		}
	} else {
		startModule = 0;
	}

	// Check topics within this module level
	if (Module.Topics !== undefined) {
		if (Module.Topics.length>0) {
                  Module.Topics[0].ParentModuleId = Module.ModuleId;
			return Module.Topics[0];
		}
	}

	// Recursively check sub-modules
	// Note: At this time we must assume that sub-modules are ordered before topics within the current
	// level as Valence is not able to provide us with ordering details.
	if (Module.Modules !== undefined) {
		for (var i = startModule; i < Module.Modules.length; i++) {
			topicID = CSVal.toc_firstTopic(Module.Modules[i]);
			if (topicID !== false) {
				return topicID;
			}
		}
	}



	// If no unread results can be found return false
	return false;
}

CSVal.get_ou_details = function(ouID) {
   var route = CSVal.routes.get_ou_details.replace("ORGID", ouID);
   valence_req
      .get(route)
      .use(valence_auth)
      .end(function(err, response) {
         if (err !== null) {
            return false;
         } else {
            var courseobj = { "orgUnitId": ouID, "details": response.body }
            pubsubz.publish('csval/get_ou_details/' + ouID, courseobj);
         }
      });
};

CSVal.get_ou_children = function() {
   var route = CSVal.routes.get_ou_children.replace("ORGID", CSVal.context.ouID);
   valence_req
      .get(route)
      .use(valence_auth)
      .end(function(err, response) {
         if (err !== null) {

            return false;
         } else {
            CSVal.context.ouChildren = response.body;
            pubsubz.publish('csval/get_ou_children');
         }
      });
};

CSVal.get_ou_pinned = function(ouID) {
   var route = CSVal.routes.get_ou_pinned.replace("ORGID", ouID);
   valence_req
      .get(route)
      .use(valence_auth)
      .end(function() {
         if (CSVal.devMode === true) {}
      });
};

CSVal.add_pinned = function(ouID) {
   var route = CSVal.routes.change_pinned.replace("ORGID", ouID);
   valence_req
      .post(route)
      .use(valence_auth)
      .end(function() {
         if (CSVal.devMode === true) {}
      });
};

CSVal.remove_pinned = function(ouID) {
   var route = CSVal.routes.change_pinned.replace("ORGID", ouID);
   valence_req
      .del(route)
      .use(valence_auth)
      .end(function() {
         if (CSVal.devMode === true) {}
      });
};

CSVal.get_module = function (ModId) {
	var route;
	route = CSVal.routes.get_module.replace("ORGID", CSVal.context.ouID);
	route = route.replace("MODID", ModId);
	valence_req
		.get(route)
		.use(valence_auth)
		.end(function (err, response) {
			if (err !== null) {
				return false;
			}
			
			modcallsdone++;
			for(var i=0; i<CSVal.toc.Modules.length; i++) {
				if(response.body.Id === CSVal.toc.Modules[i].ModuleId) {

					CSVal.toc.Modules[i].Description = response.body.Description;
                    
				}
			}	
			
			tileInit();
			
		});
};

CSVal.get_module_progress = function () {
	var route;
	route = CSVal.routes.get_completion.replace("ORGID", CSVal.context.ouID);
	route += "?level=2"
	valence_req
		.get(route)
		.use(valence_auth)
		.end(function (err, response) {
			
            if (err !== null) {
				for(var v=0; v<CSVal.toc.Modules.length; v++) {
                    CSVal.toc.Modules[v].Progress.Read = 0;
                    CSVal.toc.Modules[v].Progress.Percentage = 0;
                }
			}else{
		  
                for(var c=0; c<response.body.Objects.length; c++) {
                   
                    for(var i=0; i<CSVal.toc.Modules.length; i++) {
                        if(response.body.Objects[c].ObjectId === CSVal.toc.Modules[i].ModuleId) {

                            CSVal.toc.Modules[i].Progress.Read = response.body.Objects[c].CompletedItems;
                            CSVal.toc.Modules[i].Progress.Total = response.body.Objects[c].RequiredItems;

                            // Update the progress percentage
                            CSVal.toc.Modules[i].Progress.Percentage = (CSVal.toc.Modules[i].Progress.Total === 0) ? 0 : CSVal.toc.Modules[i].Progress.Read / CSVal.toc.Modules[i].Progress.Total * 100;
                        }
                    }
                }
            }
            
            completionCalculated = true;    
        
			tileInit();
			
		});
};

CSVal.get_topic_progress = function () {
	var route;
	route = CSVal.routes.get_completion.replace("ORGID", CSVal.context.ouID);
	route += "?level=3"
	valence_req
		.get(route)
		.use(valence_auth)
		.end(function (err, response) {
			
            if (err !== null) {
				
			}else{
                
                CSVal.tocCompletion = response.body.Objects;
                
            }
            
            topicCompletionCalculated = true;
            tileInit();
			
		});
};

CSVal.toc_nextIncomplete = function(Module) {
    for(var t=0;t<Module.Topics.length;t++){
        for(var o=0;o<CSVal.tocCompletion.length;o++){

            if(CSVal.tocCompletion[o].ObjectId === Module.Topics[t].TopicId) {

                if(CSVal.tocCompletion[o].RequiredItems === 1 && CSVal.tocCompletion[o].CompletedItems === 0){
                    return Module.Topics[t];
                }
            }

        }
    }

    return false;
};

/*
	CSVal.get_news
	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	- Add results to CSVal.news object
	- Return response body to subscribers
*/
CSVal.get_news_ou = function(ouID) {
   var route = CSVal.routes.get_news.replace("ORGID", ouID);
   valence_req
      .get(route)
      .use(valence_auth)
      .end(function(err, response) {
         if (err !== null) {
            return false;
         } else {
            var courseobj = { "orgUnitId": ouID, "news": response.body }
            pubsubz.publish('csval/get_news_ou/' + ouID, courseobj);
         }
      });
};


CSVal.get_events_ou = function(ouID) {
   var route = CSVal.routes.get_calendar.replace("ORGID", ouID);
   valence_req
      .get(route)
      .use(valence_auth)
      .end(function(err, response) {
         if (err !== null) {
            return false;
         } else {
            var courseobj = { "orgUnitId": ouID, "events": response.body }
            pubsubz.publish('csval/get_events_ou/' + ouID, courseobj);
         }
      });
};


CSVal.get_grades_ou = function(ouID) {
   var route = CSVal.routes.get_finalgrade.replace("ORGID", ouID);
   valence_req
      .get(route)
      .use(valence_auth)
      .end(function(err, response) {
         if (err !== null) {
            return false;
         } else {
            var courseobj = { "orgUnitId": ouID, "grades": response.body }
            pubsubz.publish('csval/get_grades_ou/' + ouID, courseobj);
         }
      });
};
